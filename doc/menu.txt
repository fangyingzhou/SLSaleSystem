1.角色表的设计au_role:存储当前系统中的角色
    id:角色编号ID；roleName:角色名称；roleCode:角色代码
    createdBy:创建人 isStart:该角色是否启用 createDate:创建日期

2.菜单功能表的设计au_function:存储当前系统中所有的菜单功能
    id:菜单编号；functionCode:功能编码；functionName:功能名称
    functionUrl:功能链接地址；parentId:所属父菜单ID；creationTime:创建时间

3.权限表的设计au_authority:主要用于维护功能表与角色表之间的关联关系
    id:权限编号；roleId:角色ID；functionId:功能菜单ID
    creationTime创建时间；createdBy:创建人；userTypeId:用户类型

4.根据登录用户的角色roleId来获取该用户所拥有的权限
    1.获取一级主菜单：传递的对象为authority
        select * from au_functionId where parentId = 0 and id in (select functionId from au_authority where roleId = #{roleId})

    2.获取一级主菜单下的子菜单：传递的对象是function
        select * from au_function where parentId = #{id} and id in (select functionId from au_authority where roleId = #{roleId});

    3.根据角色ID获取所有子菜单的链接地址：
        select * from au_function where parentId >0 and id in (select functionId from au_authority where roleId = #{roleId})

    4.面向对象的设计思想,声明一个菜单对象Menu:
        private Function mainFunction;
        private List<Function> subFunctionList;

    5.获取当前登录用户对应的功能菜单：
        public List<Menu> getFunctionListByCurrentUser(int roleId){
            List<Menu> menus = new ArrayList<>();
            Authority authority = new Authority();
            authority.setRoleId(roleId);
            List<Function> fList = functionService.getMainFunctionList(authority);

            for(Function func: fList){
                Menu menu = new Menu();

                func.setRoleId(roleId);   //同一个角色 拥有多个菜单
                List<Function> subFunctionList = functionService.getSubFunctionList(func);

                menu.setMainFunction(func);
                menu.setSubFunctionList(subFunctionList);

                menus.add(menu);
            }
            return menus;
        }

    6.获取当前登录用户：持有Request上下文容器
        public User getCurentUser(){

            //从持有request上下文容器中 获取到Request对象
            HttpServletRequest request = ((ServletRequestAttributes) RequestContextHolder.getRequestAttributes()).getRequest();

            //创建session request.getSession()方法默认值为true 如果不存在session则创建session 如果存在则不会创建
            //如果设置为false 当session不存在的时候 不会自动创建

            HttpSession session = request.getSession(false);

            if(session != null){
               currentUser = session.getAttribute(Constant.SESSION_USER);
            }else{
                currentUser = null;
            }
            return currentUser;
        }
    7.当用户点击提交按钮的时候，跳转到main.html控制器
        public String main(HttpSession session,Model model){
            List<Menu> mList = null;
            User user = BaseController.getCurrentUser();

            if(user != null){
                Map<String,Object> baseModel = new HashMap<>();
                baseModel.put("user",user);

                String menuKey = "menuList-"+user.getRoleId();
                //存在key
                if(redisAPI.exist(menuKey)){

                   //获取key对应的value值
                   String value = redisAPI.get(menuKey);

                   if(value != null && !value.equals(""){
                        baseModel.put("mList",value);
                   }else{
                        //如果key存在 但是对应的value值为"" ==>>说明当前登录用户没有对应的菜单功能
                        return “redirect:/”;
                   }

                }else{
                    //redis中不存在对应的key 那么需要从数据库中查询数据
                     mList = this.getFunctionListByCurrentUser(user.getRoleId());

                    //将mList集合转换成json格式的数组
                    JSONArray jsonArray = JSONArray.fromObject(mList);

                    //将功能菜单集合传递到前台页面中作显示
                    baseModel.put("mList",jsonArray.toString());

                    //将菜单数据存储到redis中
                    redisAPI.set(menuKey,jsonArray.toString());
                }

                 String roleKey = "Role-"+user.getRoleId()+"-UrlList";

                 //如果存在key
                 if(!redisAPI.exist(roleKey){
                    Authority authority = new Authority();
                    authority.setRoleId(user.getRoleId());
                    List<Function> functionList = functionService.getFunctionListByRoleId(authority);
                    if(functionList != null){
                        StringBuffer sb = new StringBuffer();
                        for(Function func:functionList){
                            sb.append(func.getFunctionUrl());
                        }
                        //存储到redis中
                        redisAPI.set(roleKey,sb.toString());
                    }
                 }

                //将菜单功能集合存储到session中 后面的每一个功能从session中获取
                session.setAttributes(Constant.SESSION_USER,mList);

                model.addAttributes(baseModel);
                return "main";
            }else{
                //如果用为null
                return "redirect:/";
            }
        }
    8.根据parentId获取整个系统中所有的菜单功能：
        1.select * from au_function where parentId = #{id};

        2.@RequestMapping(value="/backend/getfunctions.html")
          @ResponseBody
          public Object functions(){
            List<RoleList> rList = new ArrayList<>();
            Function function = new Function();
            function.setId(0);

            //获取系统中所有的一级菜单
            List<Function> fList = functionService.getSubFunctionList(function);

            if(fList != null){
                for(Function func:fList){
                    RoleFunction rf = new RoleFunction();
                    rf.setMainFunction(func);
                    List<Function> subList = functionService.getSubFunctionList(func);
                    rf.setSubFunctionList(subList);
                    rList.add(rf);
                }
                JSONArray jsonArray = JSONArray.fromObject(rList);
                return jsonArray.toString();
            }
          }
        3.前端js代码：
            $(".roleNameAuthority").click(funcion(
                var roleName = $(this).attr("rolename");
                var roleid = $(this).attr("roleid");
                $("#roleidhide").val(roleId);
                $("#selectrole").val("当前配置的角色为："+roleName);

                $.ajax({
                    url:'/backend/getfunctions.html',
                    type:'post',
                    dataType:'html',
                    timeout:1000,
                    error:function(){

                    },
                    success；function(data){
                           var json = eval("("+data+")");  //
                           var listr = "";
                           for(var i=0;i<json.length;i++){
                                listr += "<li>";
                                listr += "<ul id=\"subfuncul"+json[i].mainFunction.id+"\">";
                                listr += "<li class=\"functiontitle\"><input type=\"checkbox\" id=\"functiontitle"+json[i].mainFunction.id+"\" funcid=\""+json[i].mainFunction.id+"\" />"+json[i].mainFunction.functionName+"</li>";
                                for(var j=0;json[i].subFunctions.length;j++){
                                    listr += "<li><input type=\"checkbox\" funcid=\""+json[i].subFunctions[j].id+"\"  />"+json[i].subFunctions[j].functionName+"</li>";
                                }
                                listr +="</ul></li>";
                           }
                           //首先获取该系统中所有的菜单功能
                           $("#functionList").html(str);

                            //回显加载： 循环遍历所有的复选框 包括一级主菜单 以及其下的菜单
                           $("#functionList :checkbox").each(function(){
                                var check = $(this).val();
                                $.ajax({
                                    url:'/backend/getDefaultAuthority.html',
                                    type:'post',
                                    data:{"rid":$("#roleidhide").val(),"fid":$(this).attr("funcid")}
                                });
                           });
                    }
                });
            ));

    9.
        1.U:字符串类型；
        2.N:字符串类型；
        3.I:为菜单节点，此时I为一级菜单，其下包含子菜单如二级菜单，二级菜单又包含U、N、I，此时I为二级菜单，I下又可能包含三级菜单，此时I为三级菜单
            ，I为集合类型，当为最后一个节点的时候，I为字符串类型；
        4.